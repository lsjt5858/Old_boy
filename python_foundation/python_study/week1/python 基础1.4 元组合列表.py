#!/usr/bin/env python_study
# -*- coding: utf-8 -*-
# @Author: 熊🐻来个🥬
# @Date:  2024/12/22
# @Description: [对文件功能等的简要描述（可自行添加）]
# 1. 元组
# 1.1 什么是元组
# 元组（Tuple）是一个有序的、不可变的数据集合，通常用于存储一组相关的数据。与列表不同的是，元组一旦创建，不能修改。
# 1.2 元组的定义
# 元组的定义使用小括号 ()，元素之间用逗号 , 分隔。
t1 = (1, 2, 3)         # 包含整数的元组
t2 = ("a", "b", "c")   # 包含字符串的元组
t3 = (1, "hello", 3.14) # 包含不同类型的元组
t4 = ()              # 空元组
t5 = (5,)             # 只有一个元素的元组，注意逗号不能省略
# 1.3 元组中元素的引用
# 元组中的元素可以通过索引进行引用，索引从 0 开始。
t = (10, 20, 30)
print(t[0])  # 输出：10
print(t[1])  # 输出：20
print(t[-1]) # 输出：30 （负数索引表示倒数第几个）
# 1.4 元组的切片操作
# 与列表一样，元组也可以进行切片操作，获取部分元素。
t = (1, 2, 3, 4, 5)
print(t[1:4])  # 输出：(2, 3, 4)
print(t[:3])   # 输出：(1, 2, 3)
print(t[2:])   # 输出：(3, 4, 5)
print(t[::2])  # 输出：(1, 3, 5)
# 1.5 元组的特点
# - 不可变性：元组一旦定义后，无法修改其内容（不能进行增、删、改操作）。
# - 有序：元组的元素有顺序，可以通过索引访问。
# - 支持重复元素：元组可以包含重复元素。
# 1.6 元组的应用场景
# - 用于需要保证数据不可变的场景，比如作为字典的键。
# - 当数据不需要改变时，使用元组可以提高效率，且节省内存。
# - 存储不可变的数据，例如配置信息、坐标等。
# - 作为函数的返回值，可以一次返回多个值。
# - 用作字典的键（因为字典的键必须是不可变的）。
# 1.7 元组的常用方法
# - count(): 返回指定元素在元组中出现的次数。
my_tuple = (1, 2, 2, 3, 2)
print(my_tuple.count(2))  # 输出: 3

# len(my_tuple)：返回元组的长度。
# - index(): 返回指定元素在元组中的索引位置。
my_tuple = (1, 2, 3, 4)
print(my_tuple.index(3))  # 输出: 2
# 2. 列表
# 2.1 什么是列表
# 列表（List）是一个有序的、可变的数据集合，允许存储各种类型的元素，可以进行增、删、改、查等操作。
# 2.2 列表的特点
# - 可变性：列表是可变的，可以对列表进行修改（增、删、改）。
# - 有序：列表中的元素是有顺序的，可以通过索引访问。
# - 支持重复元素：列表可以包含重复元素。
# 2.3 列表的定义
# 列表的定义使用方括号 []，元素之间用逗号 , 分隔。
l1 = [1, 2, 3]         # 包含整数的列表
l2 = ["a", "b", "c"]   # 包含字符串的列表
l3 = [1, "hello", 3.14] # 包含不同类型的列表
l4 = []              # 空列表
# 2.4 列表中元素的引用
# 通过索引来访问列表中的元素，索引从 0 开始。
my_list = [10, 20, 30]
print(my_list[1])  # 输出: 20
# 2.5 列表中元素的修改
# 可以通过索引修改列表中的元素。
my_list = [10, 20, 30]
my_list[1] = 25
print(my_list)  # 输出: [10, 25, 30]
# 2.6 列表的切片操作
# 列表同样支持切片操作，获取部分元素。
my_list = [1, 2, 3, 4, 5]
print(my_list[1:4])  # 输出: [2, 3, 4]
# 2.7 列表的用途
# - 列表用于存储需要频繁修改的数据。
# - 当你需要对数据进行添加、删除、更新等操作时，使用列表更为合适。
# - 作为数据结构，实现栈、队列等。
# - 用于循环遍历。
# 3. 列表操作
# 3.1 获取列表元素个数
# 使用 len() 获取列表中元素的个数。
my_list = [1, 2, 3, 4]
print(len(my_list))  # 输出: 4
# 3.2 统计查找操作
# - count(): 统计某个元素在列表中出现的次数。
my_list = [1, 2, 2, 3]
print(my_list.count(2))  # 输出: 2
# - index(): 查找某个元素在列表中的索引。
my_list = [10, 20, 30]
print(my_list.index(20))  # 输出: 1
# 3.3 增加元素
# - append(): 在列表末尾添加元素。
my_list = [1, 2, 3]
my_list.append(4)
print(my_list)  # 输出: [1, 2, 3, 4]
# - insert(): 在指定位置插入元素。
my_list = [1, 2, 3]
my_list.insert(1, 5)
print(my_list)  # 输出: [1, 5, 2, 3]
# - list.extend(iterable)：将一个可迭代对象（如列表、元组）中的所有元素添加到列表末尾。
l = [1, 2]

l.extend([4, 5]) # l = [0, 1, 2, 3, 4, 5]
# 3.4 删除元素
# - remove(): 删除列表中第一个匹配的元素。
my_list = [1, 2, 3, 2]
my_list.remove(2)
print(my_list)  # 输出: [1, 3, 2]
# - pop(): 删除并返回指定位置的元素。
my_list = [10, 20, 30]
print(my_list.pop(1))  # 输出: 20
print(my_list)  # 输出: [10, 30]
# - del list[index]：删除指定索引位置的元素。
l = [1, 2, 3, 2]
del l[0]     # l = [2]
# - list.clear()：清空列表中的所有元素。
l = [1, 2, 3, 2]
l.clear()    # l = []
# 3.5 列表排序
# - sort(): 对列表进行原地排序（默认升序）。
my_list = [3, 1, 4, 2]
my_list.sort()
print(my_list)  # 输出: [1, 2, 3, 4]
# - sorted(): 返回排序后的新列表，不修改原列表。
my_list = [3, 1, 4, 2]
sorted_list = sorted(my_list)
print(sorted_list)  # 输出: [1, 2, 3, 4]
# 4. 元组和列表的区别
# 4.1 相同点
# - 都是有序的集合，元素可以通过索引访问。
# - 都支持切片操作，可以获取部分元素。
# - 都可以包含重复的元素。
# 4.2 不同点
# - 可变性：
#   - 列表是可变的，可以进行修改（增、删、改）。
#   - 元组是不可变的，创建后无法修改。
# - 性能：
#   - 元组由于不可变，所以通常在内存占用和访问速度上优于列表。
# - 用途：
#   - 元组常用于存储不需要修改的数据，尤其适合作为字典的键。
#   - 列表适用于需要频繁修改的数据。
# 4.3 内存占用
# 元组的内存占用通常比列表少，因为元组是不可变的，Python 可以在内部优化其存储方式。而列表因为是可变的，每次修改都可能导致额外的内存分配。
# 4.4 总结对比
# 暂时无法在飞书文档外展示此内容
