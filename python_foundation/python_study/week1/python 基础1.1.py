#!/usr/bin/env python_study
# -*- coding: utf-8 -*-
# @Author: 熊🐻来个🥬
# @Date:  2024/12/22
# @Description: [对文件功能等的简要描述（可自行添加）]
# 数据类型	标准数据类型，类型查看
# 数字类型	整数，浮点数，复数
# 布尔类型	条件判断，状态标记，假值状态
# 类型转换	自动转换，强制转换


# **课程模块：Python 数据类型详解**
# **目标：** 使学员全面掌握Python的各种数据类型，理解它们的特点、用途以及相互转换的方法，为后续的编程学习打下坚实的基础。
# **时长：** 半天到一天（可根据学员基础调整）
# **第一部分：标准数据类型概述**
# Python是一种动态类型语言，这意味着变量的类型是在运行时自动确定的，而不是像静态类型语言那样需要在声明时显式指定。Python内置了多种标准数据类型，主要包括：
# *   **数字类型（Numeric Types）：**
#     *   整型（int）
#     *   浮点型（float）
#     *   复数型（complex）
# *   **布尔类型（Boolean Type）：**
#     *   布尔型（bool）
# *   **序列类型（Sequence Types）：**
#     *   字符串（str）
#     *   列表（list）
#     *   元组（tuple）
# *   **集合类型（Set Types）：**
#     *   集合（set）
#     *   不可变集合（frozenset）
# *   **映射类型（Mapping Types）：**
#     *   字典（dict）
# *   **空类型（None Type）：**
#     *   空值（None）
#
# 本节课重点讲解数字类型和布尔类型。
#
# **第二部分：类型查看**
#
# Python提供了内置函数 `type()` 来查看变量或值的类型：
# ```python_study
# x = 10
# print(type(x))  # 输出：<class 'int'>
#
# y = 3.14
# print(type(y))  # 输出：<class 'float'>
#
# z = 2 + 3j
# print(type(z))  # 输出：<class 'complex'>
#
# name = "Alice"
# print(type(name))  # 输出：<class 'str'>
# ```
#
# **第三部分：数字类型**
#
# *   **整型（int）：** 用于表示整数，例如：`10`、`-5`、`0`、`1234567890`。Python的整型可以表示任意大小的整数，不受固定位数的限制。
#
# *   **浮点型（float）：** 用于表示带有小数点的数，例如：`3.14`、`-2.5`、`0.0`、`1.23e5`（科学计数法）。需要注意的是，由于浮点数的存储方式，可能会存在精度问题。
#
# *   **复数型（complex）：** 用于表示复数，由实部和虚部组成，虚部以 `j` 或 `J` 结尾，例如：`2 + 3j`、`-1.5 - 2j`。可以使用 `.real` 和 `.imag` 访问复数的实部和虚部。
#
#     ```python_study
#     c = 2 + 3j
#     print(c.real)  # 输出：2.0
#     print(c.imag)  # 输出：3.0
#     ```
#
# **第四部分：布尔类型（bool）**
#
# 布尔类型只有两个值：`True` 和 `False`，用于表示真和假。布尔值通常用于条件判断和逻辑运算。
#
# *   **条件判断：** 比较运算符（如 `==`、`!=`、`>`、`<`、`>=`、`<=`）和逻辑运算符（如 `and`、`or`、`not`）的结果都是布尔值。
#
#     ```python_study
#     x = 5
#     y = 10
#     print(x < y)  # 输出：True
#     print(x == y)  # 输出：False
#     print(not (x > y)) # 输出：True
#     ```
#
# *   **状态标记：** 可以使用布尔变量来标记某个状态，例如：
#
#     ```python_study
#     is_logged_in = True
#     if is_logged_in:
#         print("User is logged in.")
#     ```
#
# *   **假值状态：** 在Python中，以下值会被视为 `False`：
#
#     *   `False`
#     *   `None`
#     *   `0`（所有数字类型的零）
#     *   空字符串 `""`
#     *   空列表 `[]`
#     *   空元组 `()`
#     *   空字典 `{}`
#     *   空集合 `set()`
#
#     其他所有值都被视为 `True`。
#
#     ```python_study
#     if 0:
#         print("This will not be printed.")
#     if "hello":
#         print("This will be printed.")
#     ```
#
# **第五部分：类型转换**
#
# Python支持自动类型转换（隐式类型转换）和强制类型转换（显式类型转换）。
#
# *   **自动转换：** 当进行某些运算时，Python会自动进行类型转换。例如，当一个整数和一个浮点数进行运算时，整数会自动转换为浮点数。
#
#     ```python_study
#     x = 5
#     y = 3.14
#     z = x + y  # x 会自动转换为 float 类型
#     print(type(z))  # 输出：<class 'float'>
#     print(z) # 输出：8.14
#     ```
#
# *   **强制转换：** 使用类型转换函数可以将一个类型的值转换为另一个类型。常用的类型转换函数包括：
#
#     *   `int()`：转换为整型。
#     *   `float()`：转换为浮点型。
#     *   `complex()`：转换为复数型。
#     *   `str()`：转换为字符串型。
#     *   `bool()`：转换为布尔型。
#
#     ```python_study
#     x = "123"
#     y = int(x)  # 将字符串转换为整型
#     print(type(y))  # 输出：<class 'int'>
#     print(y)      # 输出：123
#
#     a = 3
#     b = float(a) # 将整型转换为浮点型
#     print(type(b))  # 输出：<class 'float'>
#     print(b)      # 输出：3.0
#
#     s = "True"
#     b = bool(s) # 将字符串转换为布尔型，非空字符串都是True
#     print(type(b)) # 输出：<class 'bool'>
#     print(b)     # 输出：True
#
#     n = 0
#     bn = bool(n) # 将数字转换为布尔型，0是False，非0是True
#     print(type(bn)) # 输出：<class 'bool'>
#     print(bn)     # 输出：False
#     ```
#
#     在进行类型转换时，需要注意以下几点：
#
#     *   不是所有类型之间都可以相互转换。例如，无法将一个包含非数字字符的字符串转换为整型。
#     *   类型转换可能会导致数据丢失或精度损失。例如，将一个浮点数转换为整型会丢失小数部分。
#
# **教学方法建议：**
#
# *   使用大量的代码示例进行演示，让学员直观地了解各种数据类型的特点和用法。
# *   结合实际应用场景进行讲解，例如使用布尔类型进行条件判断，使用数字类型进行数值计算。
# *   布置一些练习题，让学员动手实践，巩固所学知识。
# *   强调类型转换的注意事项，避免学员在实际编程中犯错。
#
# 通过以上讲解，学员应该能够全面掌握Python的数字类型和布尔类型，并能灵活运用类型转换，为后续的Python编程学习打下坚实的基础。

